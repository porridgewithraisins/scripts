#!/usr/bin/env python3

import gi
import sys

gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')

from gi.repository import Gtk
from gi.repository import Gdk

class TransparentWindow(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self)
        
        self.make_transparent()
        self.change_cursor()

        self.connect('button-press-event', self.clicked)
        self.connect('destroy', Gtk.main_quit)

        self.fullscreen()
    
    def clicked(self, window, event):
        if event.button == 1:
            text = get_color_at_coordinates(event.x, event.y)
            clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
            clipboard.set_text(text, -1)
            clipboard.store()
        
        self.shutdown()
        return True

    def make_transparent(self):
        screen = self.get_screen()
        visual = screen.get_rgba_visual()
        if visual and screen.is_composited():
            self.set_visual(visual)
        self.set_app_paintable(True)

    def change_cursor(self):
        self.original_cursor = Gdk.Cursor.new_for_display(self.get_display(), Gdk.CursorType.LEFT_PTR)
        self.get_screen().get_root_window().set_cursor(Gdk.Cursor.new_for_display(self.get_display(), Gdk.CursorType.CROSSHAIR))

    def restore_cursor(self):
        self.get_screen().get_root_window().set_cursor(self.original_cursor)

    def shutdown(self):
        self.restore_cursor()
        self.close()

def get_rgb_at_coordinates(x, y):
    return tuple(Gdk.pixbuf_get_from_window(Gdk.get_default_root_window(), x, 
    y, 1, 1).get_pixels())[:3]

def rgb_to_hex(r, g, b):
    return f'#{r:02x}{g:02x}{b:02x}'

def get_color_at_coordinates(x, y):
    preference = sys.argv[1] if len(sys.argv) >= 2 else "default"
    rgb = get_rgb_at_coordinates(x, y)
    match preference:
        case 'hex': return rgb_to_hex(*rgb)
        case 'hexu': return rgb_to_hex(*rgb).upper()
        case _: return str(rgb)

TransparentWindow().show_all()
Gtk.main()
